{"version":3,"sources":["Components/modalchildComponent.js","Components/mainComponent.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","noteinput","marginLeft","width","marginTop","backgroundColor","borderRadius","Modalchild","prop","addnote","classes","React","useState","note","values","setValues","FormControl","variant","className","InputLabel","htmlFor","FilledInput","id","type","value","onChange","event","target","endAdornment","InputAdornment","position","IconButton","edge","onClick","listroot","maxWidth","color","maxHeight","overflow","root","padding","display","alignItems","input","spacing","flex","iconButton","divider","height","margin","dividerlist","paper","border","Main","handleClose","setopen","handleClose1","setopen1","localStorage","getItem","notesarr","setnotesarr","open","open1","textareadata","settextareadata","search","setsearch","current","setcurrent","notesdata","split","filter","data","RegExp","test","map","ListItem","document","getElementById","setTimeout","ListItemAvatar","Avatar","style","ListItemText","primary","Divider","orientation","Fab","Paper","component","InputBase","placeholder","val","inputProps","aria-label","Modal","onClose","aria-labelledby","aria-describedby","concat","setItem","List","TextField","minHeight","datachangeHandler","multiline","rows","defaultValue","marginRight","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9825d8ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    noteinput:{marginLeft:'7px',width:'96%',marginTop:'7px',\r\n        backgroundColor:'white',borderRadius:3\r\n    }\r\n  }));\r\n\r\nexport default function Modalchild({addnote}){\r\n    const classes = useStyles();\r\n      const [values, setValues] = React.useState({\r\n        note: '',\r\n      });\r\n      const handleChange = (prop) => (event) => {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n      };\r\n    return(\r\n    <>\r\n        <FormControl variant=\"filled\" className={classes.noteinput}>\r\n            <InputLabel htmlFor=\"note\">Add Notes Name</InputLabel>\r\n            <FilledInput\r\n                id=\"note\"\r\n                type='text'\r\n                value={values.note}\r\n                onChange={handleChange('note')}\r\n                endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                    edge=\"end\"\r\n                    onClick={()=>{addnote(values.note)}}\r\n                    >\r\n                        <AddIcon/>\r\n                    </IconButton>\r\n                </InputAdornment>\r\n                }\r\n            />\r\n        </FormControl>\r\n    </>\r\n    )\r\n}","import React,{useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Modalchild from './modalchildComponent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    listroot: {marginTop:10,width:'100%',maxWidth: 400,backgroundColor:'blue',color:'white',borderRadius:5,maxHeight:'700px',overflow:'auto'\r\n      },\r\n    root: {padding: '2px 4px',display: 'flex',alignItems: 'center',width: 400,\r\n    },\r\n    input: {marginLeft: theme.spacing(1),flex: 1,\r\n    },\r\n    iconButton: {padding: 10,\r\n    },\r\n    divider: {height: 28,margin: 4,\r\n    },\r\n    dividerlist: {height: 1,margin: 4,\r\n    },\r\n    paper: {position: 'absolute',width: 400,height:75,backgroundColor: '#fbb',borderRadius:5,\r\n        border: '2px solid #000',marginLeft:'37%',marginTop:'10%',\r\n      },\r\n    noteinput:{marginLeft:'15%',width:'70%',marginTop:'70px',\r\n        backgroundColor:'white',borderRadius:3\r\n    }\r\n  }));\r\n\r\nfunction Main() {\r\n    const classes = useStyles();\r\n    const handleClose=()=>{setopen(false);}\r\n    const handleClose1=()=>{setopen1(false);}\r\n    const addnote=(val)=>{\r\n        if(val!=''){\r\n            setnotesarr(notesarr.concat(','+val));\r\n            localStorage.setItem('notesarr',notesarr.concat(','+val));\r\n        }\r\n        handleClose()\r\n        handleClose1()\r\n    }\r\n    const addfirstnote=(val)=>{\r\n        setnotesarr(val);\r\n        localStorage.setItem('notesarr',val);\r\n    }\r\n    const datachangeHandler=(val)=>{\r\n        settextareadata(val);\r\n        localStorage.setItem(current,val)\r\n    }\r\n    const [notesarr,setnotesarr]=useState(localStorage.getItem('notesarr'));\r\n    const [open,setopen]=useState(false);\r\n    const [open1,setopen1]=useState(false);\r\n    const [textareadata,settextareadata]=useState('');\r\n    const [search,setsearch]=useState(' ');\r\n    const [current,setcurrent]=useState('');\r\n    if(localStorage.getItem('notesarr') && search!=' ' ){\r\n        var notesdata=notesarr.split(',').filter((data)=>new RegExp(search).test(data)).map((data)=>{\r\n            return(\r\n                <>\r\n                <ListItem\r\n                    onClick={()=>{\r\n                    document.getElementById('multiline').value=localStorage.getItem(data);\r\n                    setTimeout(()=>{\r\n                        settextareadata(localStorage.getItem(data)||'');\r\n                    },100)\r\n                    setcurrent(data);\r\n                }}>\r\n                    <ListItemAvatar>\r\n                    <Avatar style={{color:'black',backgroundColor:'white'}}>\r\n                        <NotesIcon/>\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={data} />\r\n                </ListItem>\r\n                <Divider className={classes.dividerlist} orientation=\"horizontal\" />\r\n                </>\r\n            );\r\n        })\r\n    }\r\n    if(localStorage.getItem('notesarr') && search==' ' ){\r\n        var notesdata=notesarr.split(',').map((data)=>{\r\n            return(\r\n                <>\r\n                <ListItem onClick={()=>{\r\n                    document.getElementById('multiline').value=localStorage.getItem(data);\r\n                    setTimeout(()=>{\r\n                        settextareadata(localStorage.getItem(data)||'');\r\n                    },100)\r\n                    setcurrent(data);\r\n                }}>\r\n                    <ListItemAvatar>\r\n                    <Avatar style={{color:'black',backgroundColor:'white'}}>\r\n                        <NotesIcon/>\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={data}/>\r\n                </ListItem>\r\n                <Divider className={classes.dividerlist} orientation=\"horizontal\" />\r\n                </>\r\n            );\r\n        })\r\n    }\r\n    if(notesarr){\r\n        return (\r\n            <>\r\n            <div className=\"d-flex justify-content-center\" style={{marginTop:20}}>\r\n            <Fab color=\"primary\" variant=\"extended\">\r\n                <b>\r\n                Make Your Notes here!!\r\n                </b>\r\n            <EditIcon style={{marginLeft:8}}/>\r\n            </Fab>\r\n            </div>\r\n\r\n            <div className=\"container\" style={{marginTop:50,padding:30,backgroundColor:'whitesmoke',borderRadius:10}}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-5 col-md-12 col-sm-12\">\r\n                        <Paper component=\"form\" className={classes.root}>\r\n                            <InputBase\r\n                                className={classes.input}\r\n                                placeholder=\"Search\"\r\n                                onChange={(val)=>{\r\n                                    setsearch(val.target.value)\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                            />\r\n                            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                            <Divider className={classes.divider} orientation=\"vertical\" />\r\n                            <IconButton color=\"primary\" onClick={()=>{setopen(true)}} className={classes.iconButton} aria-label=\"directions\">\r\n                            <AddIcon/>\r\n                            </IconButton>\r\n                            <Modal\r\n                                className={classes.paper}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >\r\n                            <Modalchild addnote={addnote}/>\r\n                            </Modal>\r\n                        </Paper>\r\n                        <List className={classes.listroot}>\r\n                            {notesdata}\r\n                        </List>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <TextField\r\n                        style={{minHeight:500,width:'100%'}}\r\n                        id=\"multiline\"\r\n                        onChange={(val)=>{\r\n                            datachangeHandler(val.target.value)\r\n                        }}\r\n                        multiline\r\n                        rows={30}\r\n                        defaultValue={textareadata}\r\n                        variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n          );\r\n    }else{\r\n        return(\r\n        <div>\r\n            <div className=\"d-flex justify-content-center\" style={{marginTop:20}}>\r\n            <Fab color=\"primary\" variant=\"extended\">\r\n                <b>\r\n                Make Your Notes here!!\r\n                </b>\r\n            <EditIcon style={{marginLeft:8}}/>\r\n            </Fab>\r\n            </div>\r\n            <div style={{backgroundColor:'whitesmoke',marginTop:40,marginLeft:10,marginRight:10,padding:30,borderRadius:8}}>\r\n                <h3 style={{textAlign:'center',marginTop:10}}>You have Not yet added any notes !</h3>\r\n                <div className=\"d-flex justify-content-center\" style={{marginTop:100}}>\r\n                    <Paper component=\"form\" className={classes.root}>\r\n                        <InputBase\r\n                            className={classes.input}\r\n                            placeholder=\"Search\"\r\n                            inputProps={{ 'aria-label': 'search' }}\r\n                        />\r\n                        <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                        <Divider className={classes.divider} orientation=\"vertical\" />\r\n                        <IconButton color=\"primary\" onClick={()=>{setopen1(true)}} className={classes.iconButton} aria-label=\"directions\">\r\n                            <AddIcon/>\r\n                        </IconButton>\r\n                        <Modal\r\n                            className={classes.paper}\r\n                            open={open1}\r\n                            onClose={handleClose1}\r\n                            aria-labelledby=\"simple-modal-title\"\r\n                            aria-describedby=\"simple-modal-description\"\r\n                        >\r\n                            <Modalchild addnote={addfirstnote}/>\r\n                        </Modal>\r\n                    </Paper>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './Components/mainComponent';\nfunction App() {\n  return (\n    <div>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}